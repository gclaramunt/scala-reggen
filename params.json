{"name":"Scala-reggen","tagline":"Generic programming experiment in Scala","body":"scala-reggen\r\n============\r\n\r\nGeneric programming experiment in Scala\r\n\r\nA category theory based approach to generic programming, based on a pattern functor description of the type and defining a behavior for each regular functor class.\r\n\r\ne.g.\r\n\r\nList\\[A\\] ( Nil | Cons (a:A, l:List\\[A\\]) ) is represented as 1 + K A * I\r\n\r\nTree\\[A\\] (Leaf(a:A) |  Node(l:Tree\\[A\\],r:Tree\\[A\\])) is represented as K + I * I\r\n\r\nIn homage to Miles Sabin's awesome [Shapeless](https://github.com/milessabin/shapeless) this library should be eventually called \"Useless\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}